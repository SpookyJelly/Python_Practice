# 징검 다리
# 문제 설명

# 출발지점부터 distance만큼 떨어진 곳에 도착지점이 있습니다. 
# 그리고 그사이에는 바위들이 놓여있습니다. 
# 바위 중 몇 개를 제거하려고 합니다.
# 출발지점부터 도착지점까지의 거리 distance, 
# 바위들이 있는 위치를 담은 배열 rocks, 제거할 바위의 수 n이 매개변수로 주어질 때
# 바위를 n개 제거한 뒤 각 지점 사이의 거리의 최솟값 중에 
# 가장 큰 값을 return 하도록 solution 함수를 작성해주세요.

"""
처음에는 순열과 조합을 이용해서 접근하려고 했는데, 입력 데이터의 갯수를 보고
다른 방법을 이용하는 것이라고 생각했습니다.
문제에 이분 탐색이라고 적혀있어서, 이걸 어떻게 이분탐색을 하는건지? 라는 생각을 많이 했습니다
결국 다른 사람 풀이를 참조했습니다.

이번 문제의 핵심은 
1. left와 right의 범위를 줄여가면서 탐색
2. 미리 최솟값 중 최대 큰 값( 즉, 정답)을 특정한 수 N이라고 가정하고 움직임
3. 원본을 훼손하지 않고, 모든 짱돌에 대해서 나머지 짱돌과의 거리를 계산한다. -> 차이가 특정한 수 N 이하면 삭제
-> 왜 최소값을 구하는데 N 이하인 것을 삭제할까? -> 정답 구하는 방식의 차이
-> 미리 최소값 정답을 N이라고 가정하였기 때문에, 거리가 N 이하인 짱돌들은 존재하지 않는 것이 되는 것이다.
-> 그래서 마지막에 삭제한 짱돌의 갯수를 n (삭제해야하는 짱돌 갯수)와 비교해서 정답 N의 크기를 늘리거나 줄이거나 하는 것이다.
"""


def solution(distance, rocks, n):
    answer = 0

    rocks.sort() # 일단 이분탐색 하려면 정렬을 해야한다.
    rocks.append(distance) # 도착지와 이전 돌과의 거리 계산을 해야하기 때문에 append

    left, right = 0, distance # 초기값 설정

    #**이진 탐색은 left와 right가 교차할때 종료해줘야한다** left==right인 경우도 조사는 해줘야한다.
    while left<=right:
        # 임시 최소값을 계속 수정해줘야한다.
        mid = (left+right) // 2 # 초기 중간값 <-- 일단 얘가 최소값이라고 가정하고 탐색한다.
        min_dis = float('inf')
        removed_rock = 0 # 삭제된 짱돌의 수
        previous_rock = 0 # 시작돌의 위치 <-- 이건 절대 변하지 않는다.

        for rock in rocks:
            # 시작 돌과 현재 돌의 위치 차이가 잠재적 정답보다 작으면 -> 없는 돌로 친다 -> 삭제
            if rock - previous_rock < mid:
                removed_rock += 1

            # 위치 차이가 잠재적 정답보다 크면 -> 실존하는 돌이다.
            # 근데 잠재적 정답 mid가 최소값이 되어야 하고, 반환하는 값은 최솟값 중의 최대값이 되어야하므로,
            # 잠재적 정답을 더 큰 값으로 설정해야할 필요가 있다.
            else:
                min_dis = min(min_dis,rock-previous_rock)
                previous_rock = rock
        
        # 순환 다 끝났으면 정산
        # 삭제된 짱돌이 명세보다 많음 --> mid를 너무 크게 잡음 --> mid를 줄인다
        if removed_rock > n:
            right = mid-1
        # 삭제된 짱돌이 명세보다 적음 -> mid가 너무 작다 -> mid를 키운다
        else:
            left = mid +1
            answer = min_dis # 이 구문 끝나고 while문 탈출 할 수도 있으니 answer로 미리 바인딩
            
    return answer


print(solution(25, [2, 14, 11, 21, 17], 2))