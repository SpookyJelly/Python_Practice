# 공유기 설치 2110

# 도현이의 집 N개가 수직선 위에 있다. 
# 각각의 집의 좌표는 x1, ..., xN이고, 
# 집 여러개가 같은 좌표를 가지는 일은 없다.

# 도현이는 언제 어디서나 와이파이를 즐기기 위해서
# 집에 공유기 C개를 설치하려고 한다. 
# 최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에,
# 한 집에는 공유기를 하나만 설치할 수 있고, 
# 가장 인접한 두 공유기 사이의 거리를 가능한 크게 하여 설치하려고 한다.

# C개의 공유기를 N개의 집에 적당히 설치해서, 
# 가장 인접한 두 공유기 사이의 거리를 최대로 하는 
# 프로그램을 작성하시오.

# 입력
# 첫째 줄에 집의 개수 N (2 ≤ N ≤ 200,000)과 공유기의 개수 C (2 ≤ C ≤ N)이 하나 이상의 빈 칸을 사이에 두고 주어진다. 둘째 줄부터 N개의 줄에는 집의 좌표를 나타내는 xi (0 ≤ xi ≤ 1,000,000,000)가 한 줄에 하나씩 주어진다.

# 출력
# 첫째 줄에 가장 인접한 두 공유기 사이의 최대 거리를 출력한다.


# 입력의 수가 굉장히 크기 때문에, 반반씩 나눠가는 탐색을 해야한다는 생각이든다
# 이번에 풀었던 이분 탐색으로 접근해야할 거 같은데, 탐색 근거..

N,C = map(int,input().split())
# N,C = 3,3
home_lst = []
# home_lst = [1,4,6]
for n in range(N):
    home_lst.append(int(input()))
home_lst.sort()

"""
처음에는 이 시작값을

left = home_lst[0]
right = home_lst[-1]

으로 초기화 했었는데, home_lst[0] = 1 이 아닌 경우도 있다.
예를 들면 [99,100,101] 이라는 리스트에서 left = home_lst[0] 인 경우, mid = 100이 된다.
그러나 우리는 지금 mid를 설치의 최소 간격으로 간주하고 있다. 최소 간격은 상대적인 것이므로,
1부터 조사를 시작하여, 리스트의 두 요소 간의 최대 거리인 home_lst[-1] - home_lst[0] 까지 범위를 잡아 이진탐색을 실시한다.
"""

left = 1
right = home_lst[-1]-home_lst[0]
ans = 0
while left<=right:
    mid = (left+right)//2 # 임시 정답 --> 설치 최소 간격이 이정도는 되어야한다.
    cnt = 1
    current = home_lst[0] # 가장 왼쪽에는 
    for home in home_lst:
        if home - current >= mid: # 이번 home이 mid(임시 정답) 보다 더 큰 거리의 집임 --> 공유기 추가
            cnt += 1 # 공유기  추가
            current = home # 현재 위치 최신화
    
    if cnt >= C:# 카운트가 많다 -> 최소 거리를 늘려야한다
        # XXX: 왜 이진탐색을 하는데, mid보다 한 칸 더 나아가서 탐색을 하는 걸까? 다음 루프때 mid를 크게 해주기 위한 
        # 방법인것은 알겠는데, left = mid 가 아닌, left = mid +1을 해주는 이유가 궁금합니다.
        left = mid + 1 
        ans = mid # XXX: cnt = C 이 되어 while문을 탈출 할때, mid 값이 정답으로 인정 받았다는 뜻이므로, 미리 옮겨놓는다
    else:
        # XXX: 마찬가지로 왜 right = mid 가 아니라, right = mid - 1로 해주는 이유가 궁금합니다.
        right = mid - 1

print(ans)